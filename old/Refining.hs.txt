import Control.Lens
import Control.Monad.Error.Class
import Control.Monad.Reader.Class
import Control.Monad.Trans.Except
import Control.Monad.Trans.Reader (ReaderT)
import Control.Monad.Trans.State (StateT)
import Control.Monad.Trans.Writer (WriterT)
import Control.Monad.Writer.Class
import qualified Data.Map as Map
import Flex.Syntax
import PrettyShow
import Utility

-- ** refining monad

type Refine = ExceptT RefineError (ReaderT Ctx (StateT Env (WriterT [RefineError] (IO))))

data RefineError = RefineError String

-- ** context and environment

data Ctx = Ctx
  { _ctxModule :: ModuleCtx
  }

data Env = Env {}

makeLenses ''Ctx
makeLenses ''Env

-- ** checking

checkModule :: Module -> Refine ()
checkModule mdl = do
  checkDeclaration `mapM_` (mdl ^. to moduleDeclarations)

checkDeclaration :: Declaration -> Refine ()
checkDeclaration decl = case decl of
  DeclarationFunction fun | functionIsTransform fun -> do
    -- accumulate the refinement implied by types of params -- this forms the
    -- hypothesis of the function
    let params =
          concat
            [ concatMap
                (\(mb_txt, ty) -> maybe [] (\txt -> [(txt, ty)]) mb_txt)
                (functionTypeParams . functionType $ fun),
              Map.toList (functionTypeContextualParams . functionType $ fun)
            ]
    hyp <-
      foldrM
        ( \(txt, ty) hyp ->
            andRefinement hyp
              <$> ascribePatternRefinement
                Pattern
                  { _patternPrepattern = PatternNamed txt,
                    _patternType = Just ty
                  }
        )
        trivialRefinement
        params

    -- check the function's hypothesis, along with any refinement's picked
    -- up from `assert`s, transform applications, etc. along the way, imply the
    -- refinement required by the function's output
    checkDefinitionBody hyp (functionBody fun) \tm hyp -> case tm ^. termPreterm of
      TermStructure x fields -> do
        -- check structure construction satisfies refinement
        struct <-
          asks (^. ctxModule . ctxModuleDeclarations . at x) >>= \case
            Nothing -> throwError . RefineError $ "unknown structure id: " <> prettyShow x
            Just (DeclarationStructure struct) -> return struct
            _ -> throwError . RefineError $ "expected '" <> prettyShow x <> "' to be a structure id"
        goal <- substRefinement (Map.mapKeys fromUnqualText fields) (structureRefinement struct)
        goalL <- liftRefinement goal
        hypL <- liftRefinement hyp
        assertRefinementImplication hypL goalL
      TermConstructor x mb_tm' -> do
        asks (^. ctxModule . ctxModuleConstructors . at x) >>= \case
          Just (ConstructorNewtype newty) ->
            case mb_tm' of
              Nothing -> throwError . RefineError $ "newtype constructor must have argument: " <> prettyShow tm
              Just tm' ->
                -- check newtype construction satisfies refinement
                substRefinement (Map.singleton newtypeElementId tm') (newtypeRefinement newty)
                  >>= liftRefinement
                  >>= assertRefinement
          Just _ -> noCheck
          Nothing -> throwError . RefineError $ "unknown constructor id: " <> prettyShow x
      _ -> throwError . RefineError $ "malformed transform; output is not a message: " <> prettyShow decl
  DeclarationConstant con -> do
    checkDefinitionBody trivialRefinement (constantBody con) \tm hyp ->
      case tm ^. termPreterm of
        TermStructure x fields -> do
          -- check structure construction satisfies refinement
          struct <-
            asks (^. ctxModule . ctxModuleDeclarations . at x) >>= \case
              Nothing -> throwError . RefineError $ "unknown structure id: " <> prettyShow x
              Just (DeclarationStructure struct) -> return struct
              _ -> throwError . RefineError $ "expected '" <> prettyShow x <> "' to be a structure id"
          goalL <- liftRefinement =<< substRefinement (Map.mapKeys fromUnqualText fields) (structureRefinement struct)
          hypL <- liftRefinement hyp
          assertRefinementImplication hypL goalL
        TermConstructor x mb_tm' -> do
          asks (^. ctxModule . ctxModuleConstructors . at x) >>= \case
            Just (ConstructorNewtype newty) ->
              case mb_tm' of
                Nothing -> throwError . RefineError $ "newtype constructor must have argument: " <> prettyShow tm
                Just tm' ->
                  -- check newtype construction satisfies refinement
                  substRefinement (Map.singleton newtypeElementId tm') (newtypeRefinement newty)
                    >>= liftRefinement
                    >>= assertRefinement
            Just _ -> noCheck
            Nothing -> throwError . RefineError $ "unknown constructor id: " <> prettyShow x
        -- other kinds of terms don't raise refinement obligations
        _ -> noCheck
  -- other kinds of declarations don't raise refinement obligations
  _ -> noCheck

-- accumulate assertions from definition body, and check function applications
-- and structure/newtype constructions; the continuation expects the resulting
-- term if the input definition body is a block term
checkDefinitionBody :: Refinement -> DefinitionBody -> (Term -> Refinement -> Refine a) -> Refine a
checkDefinitionBody hyp def k = case def of
  DefinitionBodyTerm tm -> checkTerm hyp tm k
  _ -> throwError . RefineError $ "unexpected unelaborated definition body during refinement-checking: " <> prettyShow def

-- accumulate assertions from term, and check function applications and
-- structure/newtype constructions; the continuation expects the resulting term
-- if the input term is a block
checkTerm :: Refinement -> Term -> (Term -> Refinement -> Refine a) -> Refine a
checkTerm hyp tm k = case tm ^. termPreterm of
  TermBlock (stmts, tm) -> do
    checkTerm hyp tm $
      foldr (\stmt k _tm hyp -> checkStatement hyp stmt k) k stmts
  TermNeutral _x _args _cxargs -> unimplemented "checkTerm TermNeutral"
  TermStructure _x _fields -> unimplemented "checkTerm TermNeutral"
  TermConstructor _x _tm -> unimplemented "checkTerm TermConstructor"
  TermArray _tms -> unimplemented "checkTerm TermArray"
  TermTuple _tms -> unimplemented "checkTerm TermTuple"
  TermIf _tm1 _tm2 _tm3 -> unimplemented "checkTerm TermIf"
  -- TODO: other interesting cases
  _ -> k tm hyp

checkStatement :: Refinement -> Statement -> (Term -> Refinement -> Refine a) -> Refine a
checkStatement = unimplemented "checkStatement"

-- if the type is a refined type, then include refinements implied by that
ascribeTermRefinement :: Term -> Refine Refinement
ascribeTermRefinement _tm = unimplemented "ascribeTermRefinement"

-- if the type is a refined type, then include refinements implied by that
ascribePatternRefinement :: Pattern -> Refine Refinement
ascribePatternRefinement _pat = unimplemented "ascribePatternRefinement"

-- if the type is a refined type, then include refinements implied by that;
-- include refinements asserting the equality of introduced ids to the
-- corresponding parts of the given term
ascribeBindingRefinement :: Pattern -> Term -> Refine Refinement
ascribeBindingRefinement _pat _tm = unimplemented "ascribeBindingRefinement"

introLocal :: Id -> Type -> Refine a -> Refine a
introLocal = unimplemented "TODO: introLocal"

-- ** normalizing

normRefinement :: Refinement -> Refine Refinement
normRefinement _rfn = unimplemented "normRefinement"

normTerm :: Term -> Refine Term
normTerm _tm = unimplemented "normTerm"

substRefinement :: Map.Map Id Term -> Refinement -> Refine Refinement
substRefinement = unimplemented "TODO: substRefinement"

substTerm :: Map.Map Id Term -> Term -> Refine Term
substTerm = unimplemented "TODO: substTerm"

-- ** backend

data LiftedRefinement = LiftedRefinement Refinement BackendRefinement

instance PrettyShow LiftedRefinement where
  prettyShow (LiftedRefinement rfn _) = prettyShow rfn

data BackendRefinement

liftRefinement :: Refinement -> Refine LiftedRefinement
liftRefinement = backend "liftRefinement"

queryRefinement :: LiftedRefinement -> Refine Bool
queryRefinement = backend "queryRefinement"

queryRefinementImplication :: LiftedRefinement -> LiftedRefinement -> Refine Bool
queryRefinementImplication = backend "queryRefinement"

assertRefinement :: LiftedRefinement -> Refine ()
assertRefinement lrf =
  queryRefinement lrf >>= \case
    False -> tell [RefineError $ "assertion failed: " <> prettyShow lrf]
    True -> noCheck

assertRefinementImplication :: LiftedRefinement -> LiftedRefinement -> Refine ()
assertRefinementImplication lrf1 lrf2 =
  queryRefinementImplication lrf1 lrf2 >>= \case
    False -> tell [RefineError $ "assertion failed: " <> prettyShow lrf1 <> " ==> " <> prettyShow lrf2]
    True -> noCheck

-- ** utilities

noCheck :: Refine ()
noCheck = return ()